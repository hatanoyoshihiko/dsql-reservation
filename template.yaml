AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Web宿泊予約システム (Aurora DSQL + psycopg2-binary)

Parameters:
  DBHost:
    Type: String
  DBUser:
    Type: String
  DBName:
    Type: String

Globals:
  Function:
    Timeout: 10
    Runtime: python3.13
    Layers:
      - !Ref PythonLayer

Resources:
  ReserveFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ReserveFunction"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowDSQLTokenGeneration
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dsql:GenerateDbConnectAdminAuthToken
                Resource: "*"
  ListReservationsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-ListReservationsFunction"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowDSQLTokenGeneration
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dsql:GenerateDbConnectAdminAuthToken
                Resource: "*"

  #AuroraDSQLCluster:
  #Type: AWS::DSQL::Cluster
  #Properties:
  #  DeletionProtectionEnabled: false
  #  Tags:
  #    - Key: Name
  #      Value: !Sub "${AWS::StackName}-dsql-${AWS::AccountId}"

  UiBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-ui-bucket-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  UiBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UiBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipalRead
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${UiBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${UiCloudFrontDistribution}"

  UiCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub "${AWS::StackName} UI CloudFront"
        DefaultRootObject: index.html
        HttpVersion: http2and3
        PriceClass: PriceClass_200 # 北米・欧州・アジア・中東・アフリカ
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - JP
        Origins:
          - Id: UiS3Origin
            DomainName: !Sub "${UiBucket}.s3.${AWS::Region}.amazonaws.com"
            S3OriginConfig: {} # 必須プレースホルダ（OAC使用時でも必要）
            OriginAccessControlId: !Ref UiOAC
          - Id: ApiOrigin
            DomainName: !Sub "${MyApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginPath: /Prod
        DefaultCacheBehavior:
          TargetOriginId: UiS3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SimpleCORS
        CacheBehaviors:
          - PathPattern: /reserve
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # AllViewerExceptHostHeader

          - PathPattern: /reservations
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # AllViewerExceptHostHeader

  UiOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-UiOAC"
        Description: OAC for UI S3 bucket
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-dsql-${AWS::AccountId}"
      StageName: Prod
      Cors:
        AllowMethods:
          - OPTIONS
          - GET
          - POST
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
          - Access-Control-Allow-Headers
          - Access-Control-Allow-Methods
          - Access-Control-Allow-Origin
          - X-Api-Gateway-Secret
        AllowOrigin: "'*'"

  ReserveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.reserve.lambda_handler
      CodeUri: src/
      Role: !GetAtt ReserveFunctionRole.Arn
      Environment:
        Variables:
          #DB_HOST: !GetAtt AuroraDSQLCluster.Identifier
          DB_HOST: !Ref DBHost
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUser
      Events:
        PostReservation:
          Type: Api
          Properties:
            Path: /reserve
            Method: post
            RestApiId: !Ref MyApi
        OptionsReservation:
          Type: Api
          Properties:
            Path: /reserve
            Method: options
            RestApiId: !Ref MyApi
  ListReservationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers.list_reservations.lambda_handler
      CodeUri: src/
      Role: !GetAtt ListReservationsFunctionRole.Arn
      Environment:
        Variables:
          #DB_HOST: !GetAtt AuroraDSQLCluster.Identifier
          DB_HOST: !Ref DBHost
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUser
      Events:
        GetReservations:
          Type: Api
          Properties:
            Path: /reservations
            Method: get
            RestApiId: !Ref MyApi
        OptionsReservations:
          Type: Api
          Properties:
            Path: /reservations
            Method: options
            RestApiId: !Ref MyApi

  PythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: python-libs
      ContentUri: layers/python/
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13

Outputs:
  UiCloudFrontDomain:
    Description: "CloudFront UI Distribution Domain Name"
    Value: !GetAtt UiCloudFrontDistribution.DomainName

  ApiUrl:
    Description: "API Gateway base URL"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  ReserveFunctionEndpoint:
    Description: "POST endpoint to make reservation"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/reserve"

  ListReservationsFunctionEndpoint:
    Description: "GET endpoint to list reservations"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/reservations"

  UiBucket:
    Description: "UI S3 Bucket Name"
    Value: !Sub "${AWS::StackName}-ui-bucket-${AWS::AccountId}"

  #AuroraDSQLCluster:
  #  Description: "DSQL Cluster ARN"
  #  Value: !Sub "${AWS::StackName}-${AWS::AccountId}"
